---
kind: ObjectType
version: v1
definition:
  name: Users
  fields:
    - name: createdAt
      type: Timestamp!
    - name: email
      type: Text!
    - name: id
      type: Int4!
    - name: name
      type: Text!
    - name: password
      type: Text!
    - name: updatedAt
      type: Timestamp!
  graphql:
    typeName: Users
    inputTypeName: UsersInput
  dataConnectorTypeMapping:
    - dataConnectorName: my_pg
      dataConnectorObjectType: Users

---
kind: TypePermissions
version: v1
definition:
  typeName: Users
  permissions:
    - role: admin
      output:
        allowedFields:
          - createdAt
          - email
          - id
          - name
          - password
          - updatedAt

---
kind: BooleanExpressionType
version: v1
definition:
  name: UsersBoolExp
  operand:
    object:
      type: Users
      comparableFields:
        - fieldName: createdAt
          booleanExpressionType: TimestampBoolExp
        - fieldName: email
          booleanExpressionType: TextBoolExp
        - fieldName: id
          booleanExpressionType: Int4BoolExp
        - fieldName: name
          booleanExpressionType: TextBoolExp
        - fieldName: password
          booleanExpressionType: TextBoolExp
        - fieldName: updatedAt
          booleanExpressionType: TimestampBoolExp
      comparableRelationships: []
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: UsersBoolExp

---
kind: AggregateExpression
version: v1
definition:
  name: UsersAggExp
  operand:
    object:
      aggregatedType: Users
      aggregatableFields:
        - fieldName: createdAt
          aggregateExpression: TimestampAggExp
        - fieldName: email
          aggregateExpression: TextAggExp
        - fieldName: id
          aggregateExpression: Int4AggExp
        - fieldName: name
          aggregateExpression: TextAggExp
        - fieldName: password
          aggregateExpression: TextAggExp
        - fieldName: updatedAt
          aggregateExpression: TimestampAggExp
  count:
    enable: true
  graphql:
    selectTypeName: UsersAggExp

---
kind: OrderByExpression
version: v1
definition:
  name: UsersOrderByExp
  operand:
    object:
      orderedType: Users
      orderableFields:
        - fieldName: createdAt
          orderByExpression: TimestampOrderByExp
        - fieldName: email
          orderByExpression: TextOrderByExp
        - fieldName: id
          orderByExpression: Int4OrderByExp
        - fieldName: name
          orderByExpression: TextOrderByExp
        - fieldName: password
          orderByExpression: TextOrderByExp
        - fieldName: updatedAt
          orderByExpression: TimestampOrderByExp
      orderableRelationships: []
  graphql:
    expressionTypeName: UsersOrderByExp

---
kind: Model
version: v2
definition:
  name: Users
  objectType: Users
  source:
    dataConnectorName: my_pg
    collection: Users
  filterExpressionType: UsersBoolExp
  aggregateExpression: UsersAggExp
  orderByExpression: UsersOrderByExp
  graphql:
    selectMany:
      queryRootField: users
      subscription:
        rootField: users
    selectUniques:
      - queryRootField: usersById
        uniqueIdentifier:
          - id
        subscription:
          rootField: usersById
    filterInputTypeName: UsersFilterInput
    aggregate:
      queryRootField: usersAggregate
      subscription:
        rootField: usersAggregate

---
kind: ModelPermissions
version: v1
definition:
  modelName: Users
  permissions:
    - role: admin
      select:
        filter: null
        allowSubscriptions: true

